// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Energinet.DataHub.Wholesale.Contracts.IntegrationEvents;
using FluentAssertions;
using Xunit;

namespace Contracts.Tests;

public class AmountPerChargeResultProducedV1Tests
{
    [Fact]
    public void AmountPerChargeResultProducedV1_HasCorrectNamespace()
    {
        // Be careful to change the namespace as it is public available
        typeof(AmountPerChargeResultProducedV1).Namespace.Should().Be("Energinet.DataHub.Wholesale.Contracts.IntegrationEvents");
    }

    [Fact]
    public void AmountPerChargeResultProducedV1_CodeIsGenerated()
    {
        // Assert that the code has been generated by an heuristic - if the CalculationResultCompleted.Parser property exists then the type has most likely been generated
        // If not, the test code won't even compile. Note that it is not enough to test for existence of the type as we've created a custom partial class.
        // Actually the ".Should().NotBeNull()" part is not necessary, but it's required by the compiler.
        AmountPerChargeResultProducedV1.Parser.Should().NotBeNull();
    }

    [Fact]
    public void AmountPerChargeResultProduced_HasCorrectEventName()
    {
        // Be careful to change the event name as it is public available and used for transport message meta data in accordance with ADR-008
        AmountPerChargeResultProducedV1.EventName.Should().Be("AmountPerChargeResultProducedV1");
    }

    /// <summary>
    /// If this test fails, it probably means that the minor event version has not been bumped, but the contract has changed.
    /// In order to fix you should (probably):
    /// - Bump the minor event version
    /// - Update the content of the contract reference <see cref="LastKnownContentOfContract"/>
    /// </summary>
    [Fact]
    public void Fail_If_MinorEventVersion_ShouldHaveBeenBumped()
    {
        // Arrange
        const int actualVersion = AmountPerChargeResultProducedV1.EventMinorVersion;
        var actualContent = File.ReadAllText(@"amount_per_charge_result_produced_v1.proto");

        // Act: There is no assert but the test will fail if the minor event version has not been bumped while the contract has changed.

        // Assert (using Assert as it provides a more useful diff than FluentAssertions)
        actualVersion.Should().Be(LastKnownMinorEventVersion);
        Assert.Equal(LastKnownContentOfContract, actualContent, ignoreLineEndingDifferences: true, ignoreWhiteSpaceDifferences: true);
    }

    private const int LastKnownMinorEventVersion = 2;
    private const string LastKnownContentOfContract = @"/* Copyright 2020 Energinet DataHub A/S
 *
 * Licensed under the Apache License, Version 2.0 (the ""License2"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = ""proto3"";
import ""google/protobuf/timestamp.proto"";
import ""decimal_value.proto"";

option csharp_namespace = ""Energinet.DataHub.Wholesale.Contracts.IntegrationEvents"";


/*
 * A calculation will result in one or more wholesale results with total amounts. Each result is
 * published as an instance of this type.
 */
message TotalMonthlyAmountResultProducedV1 {
  /*
   * The ID of the calculation creating the result.
   * The ID is a UUID consisting of hexadecimal digits in the form XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX.
   * Example: 65801e3c-5131-426e-b1bb-7b186349c996
   */
  string calculation_id = 1;

  CalculationType calculation_type = 2;

  /*
   * The beginning of the calculation period.
   * The time is included in the period and is identical to the time of the first time series point
   * in the process time series type results.
   */
  google.protobuf.Timestamp period_start_utc = 3;

  /*
   * The end of the calculation period.
   * The time is excluded from the period.
   */
  google.protobuf.Timestamp period_end_utc = 4;

  string grid_area_code = 5;

  string energy_supplier_id = 6;

  optional string charge_owner_id = 7;

  Currency currency = 8;

  optional DecimalValue amount = 9;

  // ---------------------------- NESTED TYPES BELOW ----------------------------------------

  enum CalculationType {
    /*
     * Unspecified is unused but according to best practice.
     * Read more at https://protobuf.dev/programming-guides/style/#enums.
     */
    CALCULATION_TYPE_UNSPECIFIED = 0;
    CALCULATION_TYPE_WHOLESALE_FIXING = 1;
    CALCULATION_TYPE_FIRST_CORRECTION_SETTLEMENT = 2;
    CALCULATION_TYPE_SECOND_CORRECTION_SETTLEMENT = 3;
    CALCULATION_TYPE_THIRD_CORRECTION_SETTLEMENT = 4;
  }

  enum Currency {
    CURRENCY_UNSPECIFIED = 0;
    CURRENCY_DKK = 1;
  }
}
";
}
