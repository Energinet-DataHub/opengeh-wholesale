// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Energinet.DataHub.Wholesale.Contracts.IntegrationEvents;
using FluentAssertions;
using Xunit;

namespace Contracts.Tests;

public class GridLossResultProducedV1Tests
{
    [Fact]
    public void GridLossResultProducedV1_HasCorrectNamespace()
    {
        // Be careful to change the namespace as it is public available
        typeof(GridLossResultProducedV1).Namespace.Should().Be("Energinet.DataHub.Wholesale.Contracts.IntegrationEvents");
    }

    [Fact]
    public void GridLossResultProducedV1_CodeIsGenerated()
    {
        // Assert that the code has been generated by an heuristic - if the CalculationResultCompleted.Parser property exists then the type has most likely been generated
        // If not, the test code won't even compile. Note that it is not enough to test for existence of the type as we've created a custom partial class.
        // Actually the ".Should().NotBeNull()" part is not necessary, but it's required by the compiler.
        GridLossResultProducedV1.Parser.Should().NotBeNull();
    }

    [Fact]
    public void GridLossResultProducedV1_HasCorrectEventName()
    {
        // Be careful to change the event name as it is public available and used for transport message meta data in accordance with ADR-008
        GridLossResultProducedV1.EventName.Should().Be("GridLossResultProducedV1");
    }

    /// <summary>
    /// If this test fails, it probably means that the minor event version has not been bumped, but the contract has changed.
    /// In order to fix you should (probably):
    /// - Bump the minor event version
    /// - Update the content of the contract reference <see cref="LastKnownContentOfContract"/>
    /// </summary>
    [Fact]
    public void Fail_If_MinorEventVersion_ShouldHaveBeenBumped()
    {
        // Arrange
        const int actualVersion = GridLossResultProducedV1.EventMinorVersion;
        var actualContent = File.ReadAllText(@"grid_loss_result_produced_v1.proto");

        // Act: There is no assert but the test will fail if the minor event version has not been bumped while the contract has changed.

        // Assert (using Assert as it provides a more useful diff than FluentAssertions)
        actualVersion.Should().Be(LastKnownMinorEventVersion);
        Assert.Equal(LastKnownContentOfContract, actualContent, ignoreLineEndingDifferences: true, ignoreWhiteSpaceDifferences: true);
    }

    private const int LastKnownMinorEventVersion = 1;
    private const string LastKnownContentOfContract = @"/* Copyright 2020 Energinet DataHub A/S
 *
 * Licensed under the Apache License, Version 2.0 (the ""License2"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = ""proto3"";
import ""google/protobuf/timestamp.proto"";
import ""Common/Protos/decimal_value.proto"";

option csharp_namespace = ""Energinet.DataHub.Wholesale.Contracts.IntegrationEvents"";


/*
 * A calculation will result in two grid loss results per grid area (one for the positive part of grid loss and the
 * other for the negative part). Each result is published as an instance of this type.
 */
message GridLossResultProducedV1 {
    /*
     * The ID of the calculation creating the result.
     * The ID is a UUID consisting of hexadecimal digits in the form XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX.
     * Example: 65801e3c-5131-426e-b1bb-7b186349c996
     */
    string calculation_id = 1;

    /*
     * The beginning of the calculation period.
     * The time is included in the period and is identical to the time of
     * the first time series point in the results.
     */
    google.protobuf.Timestamp period_start_utc = 3;

    /*
     * The end of the calculation period.
     * The time is excluded from the period.
     */
    google.protobuf.Timestamp period_end_utc = 4;


    /*
     * Id of the metering point that the grid loss result should be assigned to
     */
    string metering_point_id = 5;

    /*
     * The type of the metering point for which the grid loss result should be assigned to.
     * METERING_POINT_TYPE_CONSUMPTION: the time series points contain the positive values of the grid loss (negative values are set to zero).
     * METERING_POINT_TYPE_PRODUCTION: the time series points contains the negative values of the grid loss (positive values are set to zero).
     */
    MeteringPointType metering_point_type = 6;

    Resolution resolution = 7;

    QuantityUnit quantity_unit = 8;

    repeated TimeSeriesPoint time_series_points = 9;

    enum MeteringPointType {
        /*
         * Unspecified is unused but according to best practice.
         * Read more at https://protobuf.dev/programming-guides/style/#enums.
         */
        METERING_POINT_TYPE_UNSPECIFIED = 0;
        METERING_POINT_TYPE_PRODUCTION = 1;
        METERING_POINT_TYPE_CONSUMPTION = 2;
    }

    enum QuantityUnit {
        /*
         * Unspecified is unused but according to best practice.
         * Read more at https://protobuf.dev/programming-guides/style/#enums.
         */
        QUANTITY_UNIT_UNSPECIFIED = 0;

        // States that the energy quantity is measured in kWh (kilo Watt hours).
        QUANTITY_UNIT_KWH = 1;
    }

    message TimeSeriesPoint {

        // The start of the time interval
        google.protobuf.Timestamp time = 1;

        /*
         * 3 digit scale decimal value of the calculated grid loss quantity. All values are either
         * a) positive or zero (when metering point type is METERING_POINT_TYPE_CONSUMPTION)
         * b) negative or zero (when metering point type is METERING_POINT_TYPE_PRODUCTION)
         */
        DecimalValue quantity = 2;
    }

    enum Resolution {
        /*
         * Unspecified is unused but according to best practice.
         * Read more at https://protobuf.dev/programming-guides/style/#enums.
         */
        RESOLUTION_UNSPECIFIED = 0;

        // States that each time series point represents a time interval of one quarter (15 minutes).
        RESOLUTION_QUARTER = 1;
    }
}
";
}
