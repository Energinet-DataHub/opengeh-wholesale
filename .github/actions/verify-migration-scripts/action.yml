# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Verify migration scripts
description: |
  This action verifies that the migration scripts in the PR branch are valid.
  The action checks that the migration scripts in the PR branch:
  1. Are newer than the latest migration script in the main branch
  2. Are not newer than the current datetime
  3. Have a filename that starts with a datetime and an underscore
  4. Are not the same as the latest migration script in the main branch
  5. Are not older than the latest migration script in the main branch
  6. Are not the same as the current datetime

#
# This action is called from the 'dotnet-build-prerelease.yml' file.
#
# Prepared outputs will be zipped and uploaded as the 'dotnet-tests' artifact.
#

inputs:
  scrips_dir_path:
    required: true
    description: "The path to the directory containing the scripts"

runs:
  using: composite
  steps:
    - name: Detect file changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          has_changed:
            - '${{ inputs.scrips_dir_path }}'

    - name: Get files from PR branch
      if: ${{ steps.filter.outputs.has_changed == 'true' }}
      id: get_script_files_in_pr
      shell: bash
      run: |
        # Gets all files in migration_scripts folder on the branch being merged excluding the __init__ file and put them into at comma seperated string
        SCRIPT_FILES_IN_PR=$(find ${{ inputs.scrips_dir_path }} -type f -not -name '__init__*' -printf "%f,")
        echo "::set-output name=script_files_in_pr::$SCRIPT_FILES_IN_PR"

    - name: Checkout main branch
      if: ${{ steps.filter.outputs.has_changed == 'true' }}
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Get files from main branch
      if: ${{ steps.filter.outputs.has_changed == 'true' }}
      id: get_script_files_in_main
      shell: bash
      run: |
        # Gets all files in migration_scripts folder on the main branch excluding the __init__ file and put them into at comma seperated string
        SCRIPT_FILES_IN_MAIN=$(find ${{ inputs.scrips_dir_path }} -type f -name '*.sql' -printf "%f,")
        echo "::set-output name=script_files_in_main::$SCRIPT_FILES_IN_MAIN"

    - name: Verify migration scripts
      if: ${{ steps.filter.outputs.has_changed == 'true' }}
      shell: bash
      run: |
        # This step verifies:
        # 1. That all files in main branch exists in the PR branch TODO JMG: remove this check when we the pipeline supports deleting scripts
        # 2. The timestamp of the new scripts in the PR branch is greater than the latest script in the main branch
        # 3. The timestamp of the new scripts in the PR branch  in the PR branch is less than the current datetime
        # 4. The new script filenames in the PR branch have an underscore at the 13th character (assuming the first 12 are YYYYMMDDHHMM)

        CURRENT_DATETIME=$(TZ=Europe/Paris date +"%Y-%m-%d %H:%M:%S")
        #Internal Field Seperator
        IFS=','

        # Get the comma seperated string saved to output script_files_in_pr
        SCRIPT_FILES_IN_PR="${{ steps.get_script_files_in_pr.outputs.script_files_in_pr }}"
        # Turns comma seperated string in to an array using the IFS
        read -ra SCRIPT_FILES_IN_PR_ARRAY <<<"$SCRIPT_FILES_IN_PR"

        # Get the comma separated string saved to output script_files_in_main
        SCRIPT_FILES_IN_MAIN="${{ steps.get_script_files_in_main.outputs.script_files_in_main }}"
        # Turns comma seperated string in to an array using the IFS
        read -ra SCRIPT_FILES_IN_MAIN_ARRAY <<<"$SCRIPT_FILES_IN_MAIN"

        # Reverse sort the SCRIPT_FILES_IN_MAIN_ARRAY to get the file with the latest prefix datetime first
        script_files_in_main_reverse_sorted=($(echo "${SCRIPT_FILES_IN_MAIN_ARRAY[@]}" | tr ' ' '\n' | sort -r))
        # Turn script_files_in_main_reverse_sorted into a array (the array will only have one item, since it wont look past a new line)
        read -ra LATEST_SCRIPT_FILE_IN_MAIN <<<"$script_files_in_main_reverse_sorted"

        # Check if there are no script files in main
        if [ ${#SCRIPT_FILES_IN_MAIN_ARRAY[@]} -eq 0 ]; then
          echo "No script files found in the main directory. Skipping step."
          exit 0
        fi

        # Create a datetime from the prefix of the first item in the LATEST_SCRIPT_FILE_IN_MAIN array
        LATEST_SCRIPT_FILE_IN_MAIN_DATETIME=$(date -d "${LATEST_SCRIPT_FILE_IN_MAIN[0]:0:8} ${LATEST_SCRIPT_FILE_IN_MAIN[0]:8:2}:${LATEST_SCRIPT_FILE_IN_MAIN[0]:10:2}" +"%Y-%m-%d %H:%M:%S")

        for item in "${SCRIPT_FILES_IN_PR_ARRAY[@]}"
        do
          # If a item from the SCRIPT_FILES_IN_PR_ARRAY does not exist in the SCRIPT_FILES_IN_MAIN_ARRAY then
          if [[ ! " ${SCRIPT_FILES_IN_MAIN_ARRAY[@]} " =~ "${item}" ]]; then
            # Create a datetime from the prefix of the item that was not in the SCRIPT_FILES_IN_MAIN_ARRAY
            UNIQUE_SCRIPT_FILE_IN_PR_DATETIME=$(date -d "${item:0:8} ${item:8:2}:${item:10:2}" +"%Y-%m-%d %H:%M:%S")
            # Fail if the items datetime is less than the LATEST_SCRIPT_FILE_IN_MAIN_DATETIME
            if [[ $UNIQUE_SCRIPT_FILE_IN_PR_DATETIME < $LATEST_SCRIPT_FILE_IN_MAIN_DATETIME ]]; then
              echo "New migration script file: ${item} can not be before the latest migration script"
              exit 1
            fi
            # Fail if the items datetime is equal the LATEST_SCRIPT_FILE_IN_MAIN_DATETIME
            if [[ $UNIQUE_SCRIPT_FILE_IN_PR_DATETIME == $LATEST_SCRIPT_FILE_IN_MAIN_DATETIME ]]; then
              echo "New migration script file: ${item} can not be the same time as the latest migration script"
              exit 1
            fi
            # Fail if the items datetime is greater than the CURRENT_DATETIME
            if [[ $UNIQUE_SCRIPT_FILE_IN_PR_DATETIME > $CURRENT_DATETIME ]]; then
              echo "New migration script file: ${item} can not be later than current datetime"
              exit 1
            fi
            # Fail if the first character after the datetime is not an underscore
            if [[ "${item:12:1}" != "_" ]]; then
              echo "New migration script file: ${item} does not have an underscore after the datetime"
              exit 1
            fi
          fi
        done
